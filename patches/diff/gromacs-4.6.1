patch -c -l -b -F 3 --suffix=.preplumed "./src/kernel/CMakeLists.txt" << \EOF_EOF
*** ./src/kernel/CMakeLists.txt.preplumed	2013-03-19 10:54:22.000000000 +0100
--- ./src/kernel/CMakeLists.txt	2013-03-19 11:07:03.000000000 +0100
***************
*** 33,38 ****
--- 33,42 ----
  # the research papers on the package. Check out http://www.gromacs.org.
  #
  
+ include(plumed.inc)
+ include(recon_patch.inc)
+ add_definitions(-DPLUMED_GROMACS45) 
+ 
  set(GMXPREPROCESS_SOURCES 
      add_par.c       
      calc_verletbuf.c
***************
*** 99,105 ****
  endif()
  
  if(GMX_FAHCORE)
!   add_library(fahcore ${MDRUN_SOURCES})
  else(GMX_FAHCORE)
  
  list(APPEND GMX_EXTRA_LIBRARIES gmxpreprocess md ${OpenMP_LINKER_FLAGS})
--- 103,109 ----
  endif()
  
  if(GMX_FAHCORE)
!   add_library(fahcore ${MDRUN_SOURCES} ${PLUMED_SRC})
  else(GMX_FAHCORE)
  
  list(APPEND GMX_EXTRA_LIBRARIES gmxpreprocess md ${OpenMP_LINKER_FLAGS})
***************
*** 120,128 ****
      set_target_properties(${PROGRAM} PROPERTIES OUTPUT_NAME "${PROGRAM}${GMX_BINARY_SUFFIX}")
  endforeach()
  
! add_executable(mdrun ${MDRUN_SOURCES} main.c)
  gmx_add_man_page(mdrun)
! target_link_libraries(mdrun ${GMX_EXTRA_LIBRARIES})
  set_target_properties(mdrun PROPERTIES OUTPUT_NAME "mdrun${GMX_BINARY_SUFFIX}" COMPILE_FLAGS "${OpenMP_C_FLAGS}")
  
  # Construct component groups for installation; note that a component may
--- 124,132 ----
      set_target_properties(${PROGRAM} PROPERTIES OUTPUT_NAME "${PROGRAM}${GMX_BINARY_SUFFIX}")
  endforeach()
  
! add_executable(mdrun ${MDRUN_SOURCES} ${PLUMED_SRC} main.c)
  gmx_add_man_page(mdrun)
! target_link_libraries(mdrun ${GMX_EXTRA_LIBRARIES} ${CAMSHIFT_LIBS})
  set_target_properties(mdrun PROPERTIES OUTPUT_NAME "mdrun${GMX_BINARY_SUFFIX}" COMPILE_FLAGS "${OpenMP_C_FLAGS}")
  
  # Construct component groups for installation; note that a component may
EOF_EOF
patch -c -l -b -F 3 --suffix=.preplumed "./src/kernel/md.c" << \EOF_EOF
*** ./src/kernel/md.c.preplumed	2013-03-19 10:54:22.000000000 +0100
--- ./src/kernel/md.c	2013-03-19 11:06:39.000000000 +0100
***************
*** 93,98 ****
--- 93,102 ----
  #include "types/iteratedconstraints.h"
  #include "nbnxn_cuda_data_mgmt.h"
  
+ /* PLUMED */ 
+ #include "metadyn.h"
+ /* END PLUMED */
+ 
  #ifdef GMX_LIB_MPI
  #include <mpi.h>
  #endif
***************
*** 716,721 ****
--- 720,732 ----
          fprintf(fplog, "\n");
      }
  
+     /* PLUMED */
+     if(logical.meta_inp) {
+       init_metadyn(top_global->natoms, ir->ePBC,  mdatoms->chargeA, mdatoms->massT,
+                    ir->delta_t, (repl_ex_nst>0?repl_ex_nst:-1),repl_ex,cr,fplog);
+     }
+     /* END PLUMED */
+ 
      /* Set and write start time */
      runtime_start(runtime);
      print_date_and_time(fplog, cr->nodeid, "Started mdrun", runtime);
***************
*** 1177,1188 ****
               * This is parallellized as well, and does communication too.
               * Check comments in sim_util.c
               */
              do_force(fplog, cr, ir, step, nrnb, wcycle, top, top_global, groups,
                       state->box, state->x, &state->hist,
                       f, force_vir, mdatoms, enerd, fcd,
                       state->lambda, graph,
                       fr, vsite, mu_tot, t, outf->fp_field, ed, bBornRadii,
!                      (bNS ? GMX_FORCE_NS : 0) | force_flags);
          }
  
          GMX_BARRIER(cr->mpi_comm_mygroup);
--- 1188,1207 ----
               * This is parallellized as well, and does communication too.
               * Check comments in sim_util.c
               */
+             /* PLUMED */
              do_force(fplog, cr, ir, step, nrnb, wcycle, top, top_global, groups,
                       state->box, state->x, &state->hist,
                       f, force_vir, mdatoms, enerd, fcd,
                       state->lambda, graph,
                       fr, vsite, mu_tot, t, outf->fp_field, ed, bBornRadii,
!                      (logical.energy? GMX_FORCE_ENERGY : 0) | (bNS ? GMX_FORCE_NS : 0) | force_flags);
! 
!             if(logical.meta_inp) {
!               plumed_setstep(step,bCPT);
!               meta_force_calculation(mdatoms->start,mdatoms->homenr,state->x,f,
!                                      state->box,enerd->term[F_EPOT], ir->opts.ref_t[0]);
!             }
!             /* END PLUMED */
          }
  
          GMX_BARRIER(cr->mpi_comm_mygroup);
EOF_EOF
patch -c -l -b -F 3 --suffix=.preplumed "./src/kernel/mdrun.c" << \EOF_EOF
*** ./src/kernel/mdrun.c.preplumed	2013-03-19 10:54:22.000000000 +0100
--- ./src/kernel/mdrun.c	2013-03-19 11:06:39.000000000 +0100
***************
*** 57,62 ****
--- 57,65 ----
  
  /* afm stuf */
  #include "pull.h"
+ /* PLUMED */
+ #include "metadyn.h"
+ /* END PLUMED */
  
  int cmain(int argc, char *argv[])
  {
***************
*** 401,406 ****
--- 404,410 ----
          { efMTX, "-mtx",    "nm",       ffOPTWR },
          { efNDX, "-dn",     "dipole",   ffOPTWR },
          { efRND, "-multidir", NULL,      ffOPTRDMULT},
+         { efDAT, "-plumed", "plumed",   ffOPTRD }, /* PLUMED */
          { efDAT, "-membed", "membed",   ffOPTRD },
          { efTOP, "-mp",     "membed",   ffOPTRD },
          { efNDX, "-mn",     "membed",   ffOPTRD }
***************
*** 716,721 ****
--- 720,727 ----
          gmx_log_open(ftp2fn(efLOG, NFILE, fnm), cr,
                       !bSepPot, Flags & MD_APPENDFILES, &fplog);
          CopyRight(fplog, argv[0]);
+ 
+ 
          please_cite(fplog, "Hess2008b");
          please_cite(fplog, "Spoel2005a");
          please_cite(fplog, "Lindahl2001a");
***************
*** 734,739 ****
--- 740,755 ----
      ddxyz[YY] = (int)(realddxyz[YY] + 0.5);
      ddxyz[ZZ] = (int)(realddxyz[ZZ] + 0.5);
  
+     /* PLUMED */
+     if (opt2bSet("-plumed",NFILE,fnm)) {
+       logical.meta_inp=1;
+       const char *metaFilename=ftp2fn(efDAT, NFILE, fnm);
+       strcpy(mtd_data.metaFilename,metaFilename);
+     } else {
+       logical.meta_inp=0;
+     }
+     /* END PLUMED */
+ 
      rc = mdrunner(&hw_opt, fplog, cr, NFILE, fnm, oenv, bVerbose, bCompact,
                    nstglobalcomm, ddxyz, dd_node_order, rdd, rconstr,
                    dddlb_opt[0], dlb_scale, ddcsx, ddcsy, ddcsz,
EOF_EOF
patch -c -l -b -F 3 --suffix=.preplumed "./src/kernel/repl_ex.c" << \EOF_EOF
*** ./src/kernel/repl_ex.c.preplumed	2013-03-19 10:54:22.000000000 +0100
--- ./src/kernel/repl_ex.c	2013-03-19 11:06:39.000000000 +0100
***************
*** 53,58 ****
--- 53,62 ----
  #include "domdec.h"
  #include "partdec.h"
  
+ /* PLUMED */
+ #include "metadyn.h"
+ /* END PLUMED */
+ 
  #define PROBABILITYCUTOFF 100
  /* we don't bother evaluating if events are more rare than exp(-100) = 3.7x10^-44 */
  
***************
*** 113,126 ****
      qall[re->repl] = q;
      gmx_sum_sim(ms->nsim, qall, ms);
  
!     bDiff = FALSE;
!     for (s = 1; s < ms->nsim; s++)
!     {
!         if (qall[s] != qall[0])
!         {
              bDiff = TRUE;
!         }
!     }
  
      if (bDiff)
      {
--- 117,132 ----
      qall[re->repl] = q;
      gmx_sum_sim(ms->nsim, qall, ms);
  
!     /* PLUMED */
!     //bDiff = FALSE;
!     //for (s = 1; s < ms->nsim; s++)
!     //{
!     //    if (qall[s] != qall[0])
!     //    {
              bDiff = TRUE;
!     //    }
!     //}
!     /* END PLUMED */
  
      if (bDiff)
      {
***************
*** 257,262 ****
--- 263,271 ----
          re->ind[i] = i;
      }
  
+     /* PLUMED */
+     /* This code is commented out to permit replicas with same temperature */
+     /*
      if (re->type < ereENDSINGLE)
      {
  
***************
*** 277,282 ****
--- 286,293 ----
              }
          }
      }
+     */
+     /* END PLUMED */
  
      /* keep track of all the swaps, starting with the initial placement. */
      snew(re->allswaps, re->nrepl);
***************
*** 903,908 ****
--- 914,925 ----
      gmx_bool  bDLambda = FALSE;
      gmx_bool  bVol     = FALSE;
  
+     /* Carlo Wed Oct 10 14:37:58 CEST 2007 */
+     /* Replica-methods stuff */
+     real delta1=0., delta2=0., delta_meta=0., betaA=0, betaB=0;
+     int target_replica;
+     real *Vbias=NULL,*Vbiasx=NULL;
+ 
      bMultiEx = (re->nex > 1);  /* multiple exchanges at each state */
      fprintf(fplog, "Replica exchange at step " gmx_large_int_pfmt " time %g\n", step, time);
  
***************
*** 1047,1052 ****
--- 1064,1090 ----
      {
          /* standard nearest neighbor replica exchange */
          m = (step / re->nst) % 2;
+         /* PLUMED */
+         if(logical.rpxm) bias_exchange_traj(re->nrepl, &(re->seed), re->ind);
+ 
+         snew(Vbias,re->nrepl);
+         snew(Vbiasx,re->nrepl);
+ 
+         if(logical.remd) {
+           for(i=0; i<re->nrepl; i++) Vbias[i]=0.;
+           for(i=0; i<re->nrepl; i++) Vbiasx[i]=0.;
+           target_replica=-1; // means NO exchange;
+           for(i=1; i<re->nrepl; i++) {
+             a = re->ind[i-1];
+             b = re->ind[i];
+             if (i % 2 == m) {
+               if(re->repl==a) target_replica=b;
+               if(re->repl==b) target_replica=a;
+             }
+           };
+           ptmetad_vbias(target_replica,Vbias,Vbiasx);
+         }
+         /* END PLUMED */
          for (i = 1; i < re->nrepl; i++)
          {
              a = re->ind[i-1];
***************
*** 1056,1061 ****
--- 1094,1108 ----
              if (i % 2 == m)
              {
                  delta = calc_delta(fplog, bPrint, re, a, b, a, b);
+                 /* PLUMED */
+                 delta1 = Vbias[a]-Vbiasx[a];
+                 delta2 = Vbias[b]-Vbiasx[b];
+                 betaA = re->beta[a];
+                 betaB = re->beta[b];
+                 delta_meta = betaA * delta1 + betaB * delta2;
+ 		delta -= delta_meta;
+                 if(bPrint) fprintf(fplog,"dplumed = %10.3e dE_term = %10.3e (kT)\n", delta_meta, delta);
+                 /* END PLUMED */
                  if (delta <= 0)
                  {
                      /* accepted */
***************
*** 1097,1102 ****
--- 1144,1153 ----
          print_prob(fplog, "pr", re->nrepl, prob);
          fprintf(fplog, "\n");
          re->nattempt[m]++;
+         /* PLUMED */
+         sfree(Vbias);
+         sfree(Vbiasx);
+         /* END PLUMED */
      }
  
      /* record which moves were made and accepted */
***************
*** 1314,1320 ****
          test_for_replica_exchange(fplog, cr->ms, re, enerd, det(state_local->box), step, time);
          prepare_to_do_exchange(fplog, re->destinations, replica_id, re->nrepl, &maxswap,
                                 re->order, re->cyclic, re->incycle, &bThisReplicaExchanged);
!     }
      /* Do intra-simulation broadcast so all processors belonging to
       * each simulation know whether they need to participate in
       * collecting the state. Otherwise, they might as well get on with
--- 1365,1375 ----
          test_for_replica_exchange(fplog, cr->ms, re, enerd, det(state_local->box), step, time);
          prepare_to_do_exchange(fplog, re->destinations, replica_id, re->nrepl, &maxswap,
                                 re->order, re->cyclic, re->incycle, &bThisReplicaExchanged);
!     /* PLUMED */
!     } else {
!         if(logical.meta_inp) ptmetad_helper();
!     };
!     /* PLUMED */
      /* Do intra-simulation broadcast so all processors belonging to
       * each simulation know whether they need to participate in
       * collecting the state. Otherwise, they might as well get on with
***************
*** 1439,1441 ****
--- 1494,1508 ----
      /* print the transition matrix */
      print_transition_matrix(fplog, "", re->nrepl, re->nmoves, re->nattempt);
  }
+ 
+ /* PLUMED */
+ int replica_exchange_get_repl(const gmx_repl_ex_t re){
+   return re->repl;
+ };
+ int replica_exchange_get_nrepl(const gmx_repl_ex_t re){
+   return re->nrepl;
+ };
+ real replica_exchange_get_temp(const gmx_repl_ex_t re,int i){
+   return re->q[ereTEMP][i];
+ };
+ /* END PLUMED */
EOF_EOF
patch -c -l -b -F 3 --suffix=.preplumed "./src/kernel/repl_ex.h" << \EOF_EOF
*** ./src/kernel/repl_ex.h.preplumed	2013-03-05 15:18:39.000000000 +0100
--- ./src/kernel/repl_ex.h	2013-03-19 11:06:39.000000000 +0100
***************
*** 73,76 ****
--- 73,81 ----
  extern void pd_distribute_state(const t_commrec *cr, t_state *state);
  /* Distributes the state after exchange for particle decomposition */
  
+ extern int replica_exchange_get_repl(const gmx_repl_ex_t re);
+ extern int replica_exchange_get_nrepl(const gmx_repl_ex_t re);
+ extern real replica_exchange_get_temp(const gmx_repl_ex_t re,int i);
+ /* Interfaces to get replica index, number of replicas and q-value */
+ 
  #endif  /* _repl_ex_h */
EOF_EOF
